<Window x:Class="NBackTask.SetupEditor"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:SystemWindows="clr-namespace:System.Windows;assembly=PresentationFramework"
        xmlns:local="clr-namespace:NBackTask"
        mc:Ignorable="d"
        Title="Setup Editor"
        Height="268"
        Width="220"
        Icon="/assets/images/icon.png"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen">

    <Window.Resources>
        <ObjectDataProvider x:Key="stimuliOrder" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:StimuliOrder"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        
        <ObjectDataProvider x:Key="horizontalAlignment" MethodName="GetValues"
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="SystemWindows:HorizontalAlignment"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <Style x:Key="CloseButton" TargetType="Button">
            <Setter Property="MinWidth" Value="60"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="Padding" Value="4"/>
        </Style>
        <Style x:Key="Iconic" TargetType="Button">
            <Setter Property="Width" Value="26"/>
            <Setter Property="Height" Value="26 "/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="76"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="2"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self},Path=(Validation.Errors)/ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="ComboBox">
            <Setter Property="Width" Value="76"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
        </Style>
        <Style x:Key="Setups" TargetType="ComboBox">
            <Setter Property="Height" Value="26"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <Style TargetType="Label">
            <Setter Property="Height" Value="26"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
    </Window.Resources>
    
    <Grid Margin="4">
        <StackPanel>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Label>Setup</Label>
                <Button Grid.Column="1" Style="{StaticResource Iconic}"
                        Content="+"
                        Padding="0"
                        FontSize="17"
                        VerticalContentAlignment="Top"
                        ToolTip="Create a new setup"
                        Click="CreateSetup_Click"/>
            </Grid>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ComboBox Style="{StaticResource Setups}"
                      ItemsSource="{Binding SetupNames}"
                      SelectedIndex="{Binding SelectedSetupIndex, Mode=TwoWay}"
                      HorizontalAlignment="Stretch"/>
                <Button Grid.Column="1" Style="{StaticResource Iconic}"
                        IsEnabled="{Binding CanDeleteSetup}"
                        ToolTip="Delete the current setup"
                        Padding="6"
                        Click="DeleteSetup_Click">
                    <Image Source="/assets/images/delete.png"/>
                </Button>
                <Button Grid.Column="1" Style="{StaticResource Iconic}"
                    IsEnabled="{Binding CanDeleteSetup}"
                    ToolTip="Delete the current setup"
                    Padding="6"
                    Click="DeleteSetup_Click">
                    <Image Source="/assets/images/delete.png"/>
                </Button>
            </Grid>
            <StackPanel Margin="0,4">
                <Grid>
                    <Label>Row count</Label>
                    <TextBox x:Name="txbRowCount">
                        <TextBox.Text>
                            <Binding Path="SetupData.RowCount" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="1" Max="5" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>
                <Grid>
                    <Label>Column count</Label>
                    <TextBox x:Name="txbColCount">
                        <TextBox.Text>
                            <Binding Path="SetupData.ColumnCount" UpdateSourceTrigger="PropertyChanged" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <local:RangeRule Min="1" Max="5" ValidatesOnTargetUpdated="True"/>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                </Grid>
                <Grid>
                    <Label>Stimuli order</Label>
                    <ComboBox ItemsSource="{Binding Source={StaticResource stimuliOrder}}"
                              SelectedItem="{Binding SetupData.StimuliOrder, Mode=TwoWay}"/>
                </Grid>
                <Grid>
                    <Label>Alignment</Label>
                    <ComboBox ItemsSource="{Binding Source={StaticResource horizontalAlignment}}"
                              SelectedItem="{Binding SetupData.Alignment, Mode=TwoWay}"/>
                </Grid>
            </StackPanel>
        </StackPanel>

        <WrapPanel HorizontalAlignment="Center" VerticalAlignment="Bottom">
            <Button Content="Save" 
                    IsDefault="True"
                    Click="Save_Click">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CloseButton}">
                        <Setter Property="IsEnabled" Value="false" />
                        <Style.Triggers>
                            <!-- Require the controls to be valid in order to press Save -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=txbRowCount, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=txbColCount, Path=(Validation.HasError)}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True" />
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Style="{StaticResource CloseButton}"
                    Content="Cancel"
                    IsCancel="True"/>
        </WrapPanel>
    </Grid>
</Window>
